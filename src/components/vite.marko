static function renderAssets(slot) {
  const entries = this.___viteEntries;
  let html = "";

  if (entries) {
    const slotWrittenEntriesKey = `___viteWrittenEntries-${slot}`;
    const lastWrittenEntry = this[slotWrittenEntriesKey] || 0;
    const writtenEntries = (this[slotWrittenEntriesKey] = entries.length);

    for (let i = lastWrittenEntry; i < writtenEntries; i++) {
      let entry = entries[i];

      if (typeof __MARKO_MANIFEST__ === "object") {
        entry = __MARKO_MANIFEST__[entry] || {};
      } else if (slot === "head") {
        // In dev mode we have is a list entries of the top level modules that need to be imported.
        // To avoid FOUC we will hide the page until all of these modules are loaded.
        const { entries } = entry;
        if (entries) {
          let sep = "";
          html += `<script${this.___viteInjectAttrs}>((root=document.documentElement)=>{`;
          html += "root.style.visibility='hidden';";
          html += "document.currentScript.remove();";
          html += "Promise.allSettled([";

          for (const id of entries) {
            html += `${sep}import(${JSON.stringify(this.___viteBasePath + id)})`;
            sep = ",";
          }

          html += "]).then(()=>{";
          html += "root.style.visibility='';";
          html +=
            "if(root.getAttribute('style')==='')root.removeAttribute('style')";
          html += "})})()</script>";
        }
      }

      const parts = entry[slot];

      if (parts) {
        for (const part of parts) {
          html +=
            part === 0 /** InjectType.AssetAttrs */
              ? this.___viteInjectAttrs
              : part === 1 /** InjectType.PublicPath */
              ? this.___viteBasePath
              : part;
        }
      }
    }
  }

  return html;
}
$ if (!out.global.___viteRenderAssets) {
  out.global.___viteInjectAttrs = out.global.cspNonce
    ? ` nonce="${out.global.cspNonce.replace(/"/g, "&#39;")}"`
    : "";
  out.global.___viteRenderAssets = renderAssets;
  out.global.___viteBasePath = input.base || import.meta.env.BASE_URL;
}

<__flush_here_and_after__>
  <if(input.base && !out.global.___flushedMBP)>
    $ out.global.___flushedMBP = true;
    $!{`<script${out.global.___viteInjectAttrs}>${
      out.global.___viteBaseVar
    }=${JSON.stringify(input.base)}</script>`}
  </if>
  $!{out.global.___viteRenderAssets(input.slot)}
</__flush_here_and_after__>
